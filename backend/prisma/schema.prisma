generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum AuthProvider {
  GOOGLE
  FACEBOOK
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model User {
  id              String            @id @default(cuid())
  email           String            @unique
  passwordHash    String?           @map("password_hash")
  name            String?
  avatar          String?
  coverPhoto      String?           @map("cover_photo")
  bio             String?           @db.Text
  role            Role              @default(USER)
  isActive        Boolean           @default(true) @map("is_active")

  googleId        String?           @unique @map("google_id")
  authProvider    AuthProvider?     @map("auth_provider")
  
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt

  passwordResets PasswordReset[]
  itineraries    Itinerary[]
  posts       Post[]
  @@map("users")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model Itinerary {
  id          String     @id @default(cuid())
  title       String
  destination String?
  startDate   DateTime   @map("start_date")
  endDate     DateTime   @map("end_date")
  budget      Decimal?
  visibility  Visibility @default(PRIVATE)
  userId      String     @map("user_id")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts       Post[]
  activities  Activity[]
  @@map("itineraries")
}

model Activity {
  id           String    @id @default(cuid())
  itineraryId  String    @map("itinerary_id")
  date         DateTime  @db.Date 
  startTime    String?   @map("start_time")
  name         String
  description  String?   @db.Text
  location     String?
  itinerary    Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  @@map("activities")
}

model Post {
  id          String    @id @default(cuid())
  content     String?   @db.Text
  media       Media[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  itineraryId String    @map("itinerary_id")
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([itineraryId])
  @@map("posts")
}

model Media {
  id        String   @id @default(cuid())
  url       String   @db.Text 
  postId    String   @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@map("media")
}

